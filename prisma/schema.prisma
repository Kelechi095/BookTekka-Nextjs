datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts       Account[]
  library        Library[]
  recommendation Recommendation[]
  reviews        Reviews[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Library {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  author         String
  description    String
  posterId       String   @db.ObjectId
  thumbnail      String
  smallThumbnail String
  genre          String
  status         String
  progress       Int      @default(0)
  currentPage    Int      @default(0)
  totalPages     Int      @default(0)
  pagesRemaining Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [posterId], references: [id], onDelete: Cascade)
}

model Recommendation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  author         String
  description    String
  posterId       String   @db.ObjectId
  poster         String?
  posterImage    String?
  likes          Int      @default(0)
  likers         String[]
  genre          String
  thumbnail      String
  smallThumbnail String

  reviews Reviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [posterId], references: [id], onDelete: Cascade)
}

model Reviews {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  recommendationId String   @db.ObjectId
  review           String
  reviewerName     String?
  reviewerImage    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendation Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}